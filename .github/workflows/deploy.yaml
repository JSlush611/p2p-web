# This workflow builds and pushes two Docker containers (backend & frontend) to Google Artifact Registry
# and deploys them on Cloud Run when a commit is pushed to the $default-branch branch.
#
# Overview:
#
# 1. Authenticate to Google Cloud
# 2. Authenticate Docker to Artifact Registry
# 3. Build Docker containers (backend & frontend)
# 4. Publish them to separate Google Artifact Registry repositories
# 5. Deploy each image to its own Cloud Run service
#
# Prerequisites:
#
# 1. Required Google Cloud APIs:
#    Cloud Run            run.googleapis.com
#    Artifact Registry    artifactregistry.googleapis.com
#
# 2. Workload Identity Federation or service account keys for GitHub:
#    https://github.com/google-github-actions/auth#setting-up-workload-identity-federation
#
# 3. IAM Permissions:
#    Cloud Run:
#      roles/run.admin
#      roles/iam.serviceAccountUser (if acting as a runtime service account)
#    Artifact Registry:
#      roles/artifactregistry.admin  (repository or project level)
#
#    Always follow the principle of least privilege.
#
# 4. Create GitHub secrets or variables for WIF_PROVIDER and WIF_SERVICE_ACCOUNT
#
# 5. Change the values for PROJECT_ID, GAR_LOCATION, REPOSITORY names, SERVICE names, and REGION below.

name: Build and Deploy to Cloud Run (Backend & Frontend)

on:
  push:
    branches:
      - main

env:
  PROJECT_ID: p2p-web-433803
  GAR_LOCATION: us-central1
  REGION: us-central1

  # Two separate Artifact Registry repositories
  BACKEND_REPOSITORY: p2p-web-backend
  FRONTEND_REPOSITORY: p2p-web-frontend

  # Two separate Cloud Run services
  BACKEND_SERVICE: p2p-web-backend
  FRONTEND_SERVICE: p2p-web-frontend

jobs:
  deploy:
    # Add 'id-token' with the intended permissions for Workload Identity Federation
    permissions:
      contents: 'read'
      id-token: 'write'

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v0'
        with:
          token_format: 'access_token'
          # The following must reference your GitHub Actions variables or secrets
          # Example of usage: set them in your repo's "Settings > Secrets > Actions" or "Settings > Variables > Actions"
          workload_identity_provider: '${{ vars.WIF_PROVIDER }}'
          service_account: '${{ vars.WIF_SERVICE_ACCOUNT }}'

      # NOTE: Alternative option - authentication via credentials JSON (commented out)
      # - name: Google Auth
      #   id: auth
      #   uses: 'google-github-actions/auth@v0'
      #   with:
      #     credentials_json: '${{ secrets.GCP_CREDENTIALS }}'
      #     token_format: 'access_token'

      # Authenticate Docker to Google Cloud Artifact Registry
      - name: Docker Auth
        id: docker-auth
        uses: 'docker/login-action@v1'
        with:
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.access_token }}'
          registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'

      # BEGIN - Docker auth and build/push for BACKEND
      - name: Build and Push Container (Backend)
        run: |-
          docker build -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.BACKEND_REPOSITORY }}/${{ env.BACKEND_SERVICE }}:${{ github.sha }}" ./p2p-backend
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.BACKEND_REPOSITORY }}/${{ env.BACKEND_SERVICE }}:${{ github.sha }}"

      - name: Deploy to Cloud Run (Backend)
        id: deploy-backend
        uses: google-github-actions/deploy-cloudrun@v0
        with:
          service: ${{ env.BACKEND_SERVICE }}
          region: ${{ env.REGION }}
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.BACKEND_REPOSITORY }}/${{ env.BACKEND_SERVICE }}:${{ github.sha }}

      # END - Docker auth and build/push for BACKEND

      # BEGIN - Docker auth and build/push for FRONTEND
      - name: Build and Push Container (Frontend)
        run: |-
          docker build -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.FRONTEND_REPOSITORY }}/${{ env.FRONTEND_SERVICE }}:${{ github.sha }}" ./p2p-frontend
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.FRONTEND_REPOSITORY }}/${{ env.FRONTEND_SERVICE }}:${{ github.sha }}"

      - name: Deploy to Cloud Run (Frontend)
        id: deploy-frontend
        uses: google-github-actions/deploy-cloudrun@v0
        with:
          service: ${{ env.FRONTEND_SERVICE }}
          region: ${{ env.REGION }}
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.FRONTEND_REPOSITORY }}/${{ env.FRONTEND_SERVICE }}:${{ github.sha }}

      # END - Docker auth and build/push for FRONTEND

      # If required, use the Cloud Run URL output in later steps
      - name: Show Outputs
        run: |-
          echo "Backend URL: ${{ steps.deploy-backend.outputs.url }}"
          echo "Frontend URL: ${{ steps.deploy-frontend.outputs.url }}"
